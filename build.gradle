apply plugin: 'idea'
apply plugin: 'maven'

buildscript {
    ext.kotlin_version = '1.3.50'
    ext.kotlinxcoroutine_version = '1.3.2'
    ext.kotlinlogging_version = '1.7.6'
    ext.protobufgradle_version = '0.8.9'
    ext.grpc_version = '1.24.0'
    ext.tcnative_version = '2.0.25.Final'
    ext.junit_version = '4.12'
    ext.mockito_version = '1.10.19'
    ext.jackson_version = '2.9.8'
    ext.protoc_version = '3.10.0'
    ext.kroto_version = '0.6.1'
    ext.slf4j_version = '1.7.28'
    ext.log4jslf4j_version = '2.12.1'
    ext.junit5_version = '5.4.2'
    ext.mockk_version = '1.9.3'
    ext.assertj_version = '3.12.2'
    ext.awaitility_version = '3.1.6'
    ext.clikt_version = '2.1.0'
    ext.doxygen_version = '0.5'


    ext.repos = {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    repositories repos

    dependencies {
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: "$kotlin_version"
        classpath group: 'com.google.protobuf', name: 'protobuf-gradle-plugin', version: "$protobufgradle_version"
        classpath group: 'org.ysb33r.gradle', name: 'doxygen', version: "$doxygen_version"
        classpath group: 'com.jfrog.bintray.gradle', name: 'gradle-bintray-plugin', version: '1.+'
    }

    if (project.hasProperty("executeAllTests") && project.findProperty("executeAllTests").toBoolean()) {
        gradle.startParameter.continueOnFailure = true
    }
}

if (!project.hasProperty('bintrayUser'))
    ext.bintrayUser = ''
if (!project.hasProperty('bintrayApikey'))
    ext.bintrayApikey = ''
ext.pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }

    scm {
        url "https://github.com/gordonmu/coio.git"
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'

    group 'com.github.gordonmu.coio'
    version = '0.7.0'
    if (!project.hasProperty("release")) {
        version += '-SNAPSHOT'
    }

    repositories repos

    compileKotlin {
        kotlinOptions.jvmTarget = "11"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "11"
    }
    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    jar {
        manifest {
            attributes(
                    'Implementation-Version': rootProject.version,
                    'Implementation-Title': rootProject.name,
                    'Created-By': "Gradle ${gradle.gradleVersion}",
                    'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                    'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
            )
        }
    }

    test {
        useJUnitPlatform()
    }

    javadoc.options.addStringOption('Xdoclint:none', '-quiet')
    javadoc.failOnError = false
    task javadocJar(type: Jar, dependsOn: javadoc) {
        from javadoc.destinationDir
        archiveClassifier.set('javadoc')
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allSource
        archiveClassifier.set('sources')
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}
